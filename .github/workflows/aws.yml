# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the master branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master


jobs:
  container_scan_docker_image:
    name: container_scan_docker_image
    runs-on: [btf-runner]
    steps:
      - name: Setup Vars
        id: setup
        run: |
          echo "IMAGE_NAME=nginx:latest_css" >> $GITHUB_ENV
          echo "Image Name from env"
          echo ${{ env.IMAGE_NAME }}
          echo ::set-output name=IMAGE_NAME::"nginx:latest_css"
          echo "Image Name from steps"
          echo ${{ steps.vars.outputs.IMAGE_NAME }}

      - uses: actions/checkout@v2

      - name: Build image on local machine
        id: build_image
        run: docker build . --file Dockerfile --tag ${{ env.IMAGE_NAME }}

      - name: Scan image
        id: scan_image
        uses: sip-workflow-templates/container-security-scan@master
        with:
          http_proxy: http://security-proxy.emea.svc.corpintra.net:3128
          pcc_console_url: https://consec-scan.app.corpintra.net/
          pcc_user: ${{ secrets.CSS_USER }}
          pcc_pass: ${{ secrets.CSS_PWD }}
          image_name: ${{ env.IMAGE_NAME }}

      - name: Process scan results
        id: set_var
        run: |
          summary=$(cat pcc_scan_results.json | jq '.results[0] | {vulnerabilityScanPassed: .vulnerabilityScanPassed, vulnerabilityDistribution: .vulnerabilityDistribution, complianceScanPassed: .complianceScanPassed, complianceDistribution: .complianceDistribution}')
          vulnerabilities=$(cat pcc_scan_results.json | jq -c -r '"ID\tCVSS\tSeverity\tLink","--------------\t----\t--------\t----------------------------------------------------------", (.results[0].vulnerabilities[] | [.id, .cvss // "?.?", .severity, .link] | @tsv)' | column -t -s $'\t')
          compliances=$(cat pcc_scan_results.json | jq -c -r '"Title\tSeverity", "----------------------------------------------------------------------\t--------", (.results[0].compliances[] | [.title, .severity] | @tsv)' | column -t -s $'\t')
          echo "::set-output name=scan_result_summary::$summary"
          echo "::set-output name=scan_result_vulnerabilities::$vulnerabilities"
          echo "::set-output name=scan_result_compliances::$compliances"

      - name: test
        run: |
          echo "=================================="
          echo ${{ steps.set_var.outputs.scan_result_summary }}
          echo "=================================="
          echo ${{steps.set_var.outputs.scan_result_vulnerabilities}}
          echo "=================================="
          echo ${{steps.set_var.outputs.scan_result_compliances}}
      
      - uses: actions/upload-artifact@v2
        with:
          name: pcc-scan-results
          path: ${{ github.workspace }}/pcc_scan_results.json

      - name: Comment results on pull_request
        id: comment_results_on_pr
        uses: sip-workflow-templates/github-script@master
        if: ${{ github.event_name == 'pull_request' }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: JSON.stringify({summary: ${{steps.set_var.outputs.scan_result_summary}}, vulnerabilities: ${{steps.set_var.outputs.scan_result_vulnerabilities}}, compliances: ${{steps.set_var.outputs.scan_result_compliances}} })
            })

      - name: Clean image built on local machine
        id: clean_image
        run: docker rmi ${{ env.IMAGE_NAME }}
